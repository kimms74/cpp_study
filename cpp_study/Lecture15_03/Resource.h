#pragma once
#include <iostream>

class Resource
{
	//private:
public:
	int* m_data = nullptr;	//원한다면 template을 사용해서 int를 일반화할 수도 있다
	unsigned m_length = 0;

public:
	Resource()
	{
		std::cout << "Resource default constructed" << std::endl;
	}

	Resource(unsigned length)
	{
		std::cout << "Resource length constructed" << std::endl;

		this->m_data = new int[length];	//this->안붙여도 됨
		this->m_length = length;		//this->안붙여도 됨
	}

	Resource(const Resource& res)
	{
		std::cout << "Resource copy constructed" << std::endl;

		Resource(res.m_length);

		for (unsigned i = 0; i < m_length; ++i)	//deep copying(깊은 복사)	//lecture09_11 참고
			m_data[i] = res.m_data[i];			//주소값만 복사하는 게 아닌 data 자체를 복사해 넣는것
	}

	~Resource()
	{
		std::cout << "Resource dstroyed " << std::endl;

		if (m_data != nullptr) delete[] m_data;
	}

	Resource& operator = (Resource& res)
	{
		std::cout << "Resource copy assignment" << std::endl;

		if (&res == this) return *this;

		if (this->m_data != nullptr) delete[] m_data;	//copy assignment는 copy전 memory를 가지고 있을 수 있기 때문에 지워주는 것
		
		m_length = res.m_length;
		m_data = new int[m_length];

		for (unsigned i = 0; i < m_length; ++i)	//deep copying(깊은 복사)	//memory를 따로 만들어줌으로 trouble 발생하지 않는다
			m_data[i] = res.m_data[i];

		return *this;
	}

	void print()
	{
		for (unsigned i = 0; i < m_length; ++i)
			std::cout << m_data[i] << " ";
		std::cout << std::endl;
	}
};